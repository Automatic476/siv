type Obj = Record<string, unknown>

/**
 * Creates an object with the same keys as object and values generated by running each own
 * enumerable property of object through iteratee. The iteratee function is
 * invoked with three arguments: (value, key, object).
 *
 * Example:
 *
 * ```
 * const users = {
 *   fred: { user: 'fred', age: 40 },
 *
 *   pebbles: { user: 'pebbles', age: 1 },
 * }
 *
 * mapValues(users, (u) => u.age) // { fred: 40, pebbles: 1 }
 * ```
 *
 */
export const mapValues = (obj: Obj, fn: (value: unknown, key: string, obj?: Obj) => unknown) =>
  Object.keys(obj).reduce((acc: Obj, k) => {
    acc[k] = fn(obj[k], k, obj)
    return acc
  }, {})

export const mapKeys = (obj: Obj, fn: (value: unknown, key: string, obj?: Obj) => string) =>
  Object.keys(obj).reduce((acc: Obj, k) => {
    acc[fn(obj[k], k, obj)] = obj[k]
    return acc
  }, {})
